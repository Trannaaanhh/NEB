/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package WS;

import ObjectService.Employee;
import ObjectService.ObjectService;
import ObjectService.ObjectService_Service;
import java.time.DayOfWeek;
import java.time.LocalDate;
import javax.xml.datatype.XMLGregorianCalendar;

/**
 *
 * @author Admin
 */
public class WS_ObjectService_meTEkpIr {

    public static void main(String[] args) throws Exception {
        // --- ‚ö†Ô∏è THAY C√ÅC TH√îNG S·ªê N√ÄY ---
        String studentCode = "B22DCVT034"; // <<== THAY B·∫∞NG M√É SINH VI√äN
        String qCode = "meTEkpIr";
        // ------------------------------------

        System.out.println("üöÄ Starting Client Program for ObjectService...");

        // Kh·ªüi t·∫°o d·ªãch v·ª• web
        ObjectService_Service service = new ObjectService_Service();
        ObjectService port = service.getObjectServicePort();

        // a. Tri·ªáu g·ªçi ph∆∞∆°ng th·ª©c requestEmployee ƒë·ªÉ nh·∫≠n ƒë·ªëi t∆∞·ª£ng
        System.out.println("1. Requesting Employee object from server...");
        Employee employee = port.requestEmployee(studentCode, qCode);

        if (employee == null || employee.getStartDate() == null || employee.getEndDate() == null) {
            System.out.println("Error: Received null Employee object or dates.");
            return;
        }
        
        System.out.println("=> Employee object received successfully.");

        // b. T√≠nh to√°n s·ªë ng√†y l√†m vi·ªác
        System.out.println("\n2. Calculating working days...");

        // L·∫•y ng√†y b·∫Øt ƒë·∫ßu v√† k·∫øt th√∫c t·ª´ ƒë·ªëi t∆∞·ª£ng Employee
        XMLGregorianCalendar xmlStartDate = employee.getStartDate();
        XMLGregorianCalendar xmlEndDate = employee.getEndDate();

        // Chuy·ªÉn ƒë·ªïi t·ª´ ki·ªÉu XMLGregorianCalendar sang ki·ªÉu LocalDate ƒë·ªÉ d·ªÖ x·ª≠ l√Ω
        LocalDate startDate = xmlStartDate.toGregorianCalendar().toZonedDateTime().toLocalDate();
        LocalDate endDate = xmlEndDate.toGregorianCalendar().toZonedDateTime().toLocalDate();
        
        System.out.println("-> Start Date: " + startDate);
        System.out.println("-> End Date: " + endDate);

        long workingDays = 0;
        LocalDate currentDate = startDate;

        // V√≤ng l·∫∑p ƒë·ªÉ duy·ªát qua t·ª´ng ng√†y t·ª´ ng√†y b·∫Øt ƒë·∫ßu ƒë·∫øn ng√†y k·∫øt th√∫c
        while (!currentDate.isAfter(endDate)) {
            // L·∫•y ng√†y trong tu·∫ßn (Th·ª© Hai, Th·ª© Ba,...)
            DayOfWeek day = currentDate.getDayOfWeek();
            
            // N·∫øu kh√¥ng ph·∫£i Th·ª© B·∫£y v√† Ch·ªß Nh·∫≠t th√¨ tƒÉng bi·∫øn ƒë·∫øm
            if (day != DayOfWeek.SATURDAY && day != DayOfWeek.SUNDAY) {
                workingDays++;
            }
            
            // Chuy·ªÉn sang ng√†y ti·∫øp theo
            currentDate = currentDate.plusDays(1);
        }

        System.out.println("=> Calculated Working Days: " + workingDays);

        // C·∫≠p nh·∫≠t thu·ªôc t√≠nh workingDays cho ƒë·ªëi t∆∞·ª£ng Employee
        // C·∫ßn √©p ki·ªÉu v·ªÅ int v√¨ setter c·ªßa Employee th∆∞·ªùng nh·∫≠n ki·ªÉu int
        employee.setWorkingDays((int) workingDays);
        
        // c. G·ª≠i ƒë·ªëi t∆∞·ª£ng Employee ƒë√£ c·∫≠p nh·∫≠t tr·ªü l·∫°i server
        System.out.println("\n3. Submitting updated Employee object back to the server...");
        port.submitEmployee(studentCode, qCode, employee);
        System.out.println("=> Employee object submitted successfully.");

        // d. K·∫øt th√∫c ch∆∞∆°ng tr√¨nh
        System.out.println("\n‚úÖ Program finished.");
    }
}